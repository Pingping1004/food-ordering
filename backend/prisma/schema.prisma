generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RoleRequest {
  requestId   String            @id @default(uuid())
  userId      String            @unique
  requestRole Role
  status      RoleRequestStatus
  createdAt   DateTime          @default(now())
  updatedAt   DateTime?
  user        User              @relation("UserToRoleRequest", fields: [userId], references: [userId])
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  jti       String   @unique
  userId    String
  expiresAt DateTime
  issuedAt  DateTime @default(now())
  isUsed    Boolean  @default(false)
  isRevoked Boolean  @default(false)
  user      User     @relation("UserToRefreshTokens", fields: [userId], references: [userId])
}

model Payout {
  payoutId          String     @id @default(uuid())
  restaurantRevenue Decimal    @db.Decimal(10, 2)
  platformFee       Decimal    @db.Decimal(10, 2)
  transactionFee    Decimal    @db.Decimal(10, 2)
  isPaid            Boolean    @default(false)
  startDate         DateTime
  endDate           DateTime
  paidAt            DateTime?
  createdAt         DateTime   @default(now())
  orderId           String     @unique
  restaurantName    String
  restaurantId      String
  order             Order      @relation("OrderToPayout", fields: [orderId], references: [orderId])
  restaurant        Restaurant @relation("RestaurantPayment", fields: [restaurantId], references: [restaurantId], onDelete: Cascade)
}

model Restaurant {
  restaurantId        String               @id @default(uuid())
  email               String               @unique
  restaurantImg       String?
  name                String               @unique
  location            String?
  categories          RestaurantCategory[]
  openTime            String
  closeTime           String
  avgCookingTime      Int
  isApproved          Boolean             @default(false)
  adminName           String
  adminSurname        String
  adminTel            String
  adminEmail          String

  accountNumber       String?             @default("0000000000")
  bankAccount         String?             @default("TEST ACCOUNT")
  accountHolderFullName   String?         @default("TEST BANK")

  openDate            DateWeek[]
  userId              String               @unique
  isTemporarilyClosed Boolean              @default(false)
  menus               Menu[]               @relation("RestaurantMenus")
  orders              Order[]              @relation("restaurantToOrder")
  payout              Payout[]             @relation("RestaurantPayment")
  user                User                 @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([restaurantId])
  @@index([openTime])
}

model Menu {
  menuId       String      @id @default(uuid())
  name         String      @unique
  menuImg      String
  price        Int
  maxDaily     Int         @default(100)
  cookingTime  Int?
  createdAt    DateTime    @default(now())
  isAvailable  Boolean     @default(true)
  restaurantId String
  restaurant   Restaurant  @relation("RestaurantMenus", fields: [restaurantId], references: [restaurantId], onDelete: Cascade)
  orderMenus   OrderMenu[] @relation("menuToOrderMenus")

  @@unique([restaurantId, name])
  @@index([restaurantId])
  @@index([isAvailable])
  @@index([cookingTime])
}

model OrderMenu {
  orderMenuId String  @id @default(uuid())
  quantity    Int
  menuName    String
  menuImg     String?
  unitPrice   Float
  totalPrice  Decimal   @db.Decimal(10, 2)
  orderId     String
  menuId      String
  menu        Menu    @relation("menuToOrderMenus", fields: [menuId], references: [menuId], onDelete: Cascade)
  order       Order   @relation("OrderToMenu", fields: [orderId], references: [orderId], onDelete: Cascade)

  @@index([menuId])
  @@index([orderId])
}

model Order {
  orderId              String      @id @default(uuid())
  status               OrderStatus @default(receive)
  orderAt              DateTime    @default(now())
  deliverAt            DateTime
  isPaid               PaymentStatus      @default(unpaid)
  isDelay              Boolean     @default(false)
  totalAmount          Decimal    @db.Decimal(10, 2)
  paidAt               DateTime?
  paymentGatewayChargeId        String?     @unique @map("omise_charge_id")
  paymentMethod    String?     @map("payment_method_type")
  paymentCurrency      String?     @map("payment_currency")
  paymentGatewayStatus String?     @map("payment_gateway_status")
  failureReason        String?
  restaurantId         String
  restaurant           Restaurant  @relation("restaurantToOrder", fields: [restaurantId], references: [restaurantId], onDelete: Cascade)
  orderMenus           OrderMenu[] @relation("OrderToMenu")
  payoutId            String?
  payout               Payout?     @relation("OrderToPayout")
  userId              String
  user                User          @relation("OrderToUser", fields: [userId], references: [userId], onDelete: Cascade)

  @@index([restaurantId])
  @@index([status])
  @@index([isPaid])
  @@index([orderAt])
  @@index([payoutId])
}

model User {
  userId        String         @id @default(uuid())
  email         String         @unique
  name          String?
  password      String
  profileImg    String?
  role          Role           @default(user)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  refreshTokens RefreshToken[] @relation("UserToRefreshTokens")
  restaurant    Restaurant?
  RoleRequest   RoleRequest?   @relation("UserToRoleRequest")
  order         Order[]        @relation("OrderToUser")

  @@index([name])
  @@index([userId])
  @@index([role])
}

enum DateWeek {
  mon
  tue
  wed
  thu
  fri
  sat
  sun
}

enum RoleRequestStatus {
  pending
  accepted
  rejected
}

enum PaymentMethod {
  promptpay
  mobileBanking
  cash
}

enum OrderStatus {
  receive
  cooking
  ready
  done
  rejected
}

enum Role {
  admin
  cooker
  user
  guest
}

enum PaymentStatus {
  paid
  unpaid
  processing
  rejected
}

enum RestaurantCategory {
  Steak
  Halal
  Made_to_order
  Esan
  Rice
  Appetizer
  Noodle
  Dessert
}
