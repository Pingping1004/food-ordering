// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  receive
  cooking
  ready
  done
  delay
  rejected
}

enum Role {
  admin
  cooker
  user
}

enum IsPaid {
  paid
  unpaid
  processing
  rejected
}

enum RestaurantCategory {
  Steak
  Halal
  Made_to_order
  Esan
  Rice
  Appetizer
  Noodle
}

model Restaurant {
  restaurantId  String @default(uuid()) @id
  email String @unique
  role  Role  @default(cooker)
  restaurantImg String?
  password  String
  name  String  @unique
  location  String?
  categories  RestaurantCategory[]
  openTime  String
  closeTime String
  
  adminName    String
  adminSurname String
  adminTel     String
  adminEmail   String

  menus Menu[]  @relation("RestaurantMenus")

  orders  Order[]   @relation("restaurantToOrder")
}

model Menu {
  menuId  String  @default(uuid()) @id
  name  String
  menuImg String?
  price Float
  maxDaily  Int
  cookingTime Int
  createdAt DateTime  @default(now())
  isAvailable Boolean @default(true)

  restaurantId  String
  restaurant  Restaurant  @relation("RestaurantMenus", fields: [restaurantId], references: [restaurantId], onDelete: Cascade)

  orderMenus  OrderMenu[]  @relation("menuToOrderMenus")

  @@unique([restaurantId, name])

  @@index([restaurantId])
  @@index([isAvailable])
  @@index([cookingTime])
}

model OrderMenu {
  orderMenuId      String @default(uuid()) @id
  quantity   Int
  menuName   String
  menuImg   String?
  unitPrice Float
  totalPrice Float?

  orderId String
  order   Order  @relation("OrderToMenu", fields: [orderId], references: [orderId], onDelete: Cascade)

  menuId  String
  menu  Menu  @relation("menuToOrderMenus", fields: [menuId], references: [menuId], onDelete: Cascade)

  @@index([menuId])
  @@index([orderId])
}

// must validate that restaurantName is included in restaurantNameList
model Order {
  orderId String @default(uuid()) @id
  status  OrderStatus @default(receive)
  orderAt DateTime  @default(now())
  deliverAt DateTime
  isPaid  IsPaid  @default(unpaid)
  isDelay Boolean @default(false)
  totalAmount   Int
  paidAt    DateTime?

  omiseChargeId   String?   @unique   @map("omise_charge_id")
  paymentMethodType   String?   @map("payment_method_type")
  paymentCurrency   String?   @map("payment_currency")
  paymentGatewayStatus  String? @map("payment_gateway_status")
  failureReason String?

  restaurantId  String
  restaurant  Restaurant  @relation("restaurantToOrder", fields: [restaurantId], references: [restaurantId], onDelete: Cascade)
  
  orderMenus OrderMenu[] @relation("OrderToMenu")

  @@index([restaurantId])
  @@index([status])
  @@index([isPaid])
  @@index([orderAt])
}

model User {
  userId  String @id  @default(uuid())
  email   String  @unique
  name    String
  password    String?

  @@index([name])
}
