// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  receive
  cooking
  ready
  done
  delay
  rejected
}

enum Role {
  admin
  cooker
  user
}

enum RestaurantCategory {
  Steal
  Halal
  Made_to_order
  Esan
  Rice
  Appetizer
  Noodle
}

model Restaurant {
  restaurantId  String @default(uuid()) @id
  email String @unique
  role  Role  @default(cooker)
  password  String
  name  String  @unique
  categories  RestaurantCategory[]
  openTime  String
  closeTime String
  
  adminName    String
  adminSurname String
  adminTel     String
  adminEmail   String

  menus Menu[]  @relation("RestaurantMenus")
}

model Menu {
  menuId  String  @default(uuid()) @id
  name  String
  role  Role  @default(cooker)
  menuImg String?
  price Float
  maxDaily  Int
  cookingTime Int
  createdAt DateTime  @default(now())
  isAvailable Boolean @default(true)

  restaurantName  String
  restaurant  Restaurant  @relation("RestaurantMenus", fields: [restaurantName], references: [name])
}

model OrderMenu {
  orderMenuId      String @default(uuid()) @id
  units   Int
  value   String

  orderId String
  order   Order  @relation("OrderMenus", fields: [orderId], references: [orderId])
}

// must validate that restaurantName is included in restaurantNameList
model Order {
  orderId String @default(uuid()) @id
  name  String
  role  Role  @default(user)
  price Int
  status  OrderStatus @default(receive)
  restaurantName  String
  orderAt DateTime  @default(now())
  deliverAt DateTime
  details String?
  isPaid  Boolean
  
  orderMenus OrderMenu[] @relation("OrderMenus")
}
